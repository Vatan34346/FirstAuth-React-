{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Front\\\\AuthWithReact\\\\src\\\\Store\\\\AuthContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\n\nconst AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const logountHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: props.childern\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AuthContextProvider, \"KevDNrCXvtsbrnrIN4+rjR7PIn4=\");\n\n_c = AuthContextProvider;\n\nconst loginhandler = () => {\n  setIsLoggedIn(true);\n};\n\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Front/AuthWithReact/src/Store/AuthContext.jsx"],"names":["React","useState","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","setIsLoggedIn","logountHandler","childern","loginhandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACtCC,EAAAA,UAAU,EAAE,KAD0B;AAEtCC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAFoB,CAApB,CAApB;;AAKA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAEvC,QAAM,CAACH,UAAD,EAAYI,aAAZ,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;;AAEA,QAAMQ,cAAc,GAAC,MAAI;AACrBD,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAFD;;AAGE,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAA,cAAuBD,KAAK,CAACG;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CARD;;GAAMJ,mB;;KAAAA,mB;;AAUN,MAAMK,YAAY,GAAE,MAAI;AACpBH,EAAAA,aAAa,CAAC,IAAD,CAAb;AACH,CAFD;;AAGA,eAAeN,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogout: () => {},\r\n});\r\n\r\nconst AuthContextProvider = (props) => {\r\n\r\nconst [isLoggedIn,setIsLoggedIn]=useState(false);\r\n\r\nconst logountHandler=()=>{\r\n    setIsLoggedIn(false)\r\n}\r\n  return <AuthContext.Provider>{props.childern}</AuthContext.Provider>;\r\n};\r\n\r\nconst loginhandler =()=>{\r\n    setIsLoggedIn(true);\r\n}\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}